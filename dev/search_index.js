var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Pixell","category":"page"},{"location":"#Pixell","page":"Home","title":"Pixell","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Pixell.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Pixell]","category":"page"},{"location":"#Pixell.Enmap","page":"Home","title":"Pixell.Enmap","text":"Map type, contains an AbstractArray and a WCS object, but behaves like the AbstractArray it contains for array operations. It only implements the subset of Base.Array operations which are common on maps. You should work with the data directly using enmap_instance.data if you need additional Array functions.\n\n\n\n\n\n","category":"type"},{"location":"#Pixell.fullsky_geometry-Tuple{Type{<:CarClenshawCurtis}, Any}","page":"Home","title":"Pixell.fullsky_geometry","text":"fullsky_geometry([P=CarClenshawCurtis], res; shape = nothing, dims = ())\n\nGenerates a full-sky geometry.\n\nArguments:\n\nproj=CarClenshawCurtis: [optional] projection\nres: resolution in radians. Passing a Number produces a square pixel.   Passing a tuple with (ΔRA, ΔDEC) produces a rectangular pixel.\n\nKeywords\n\nshape::NTuple=nothing: shape of the map. If not specified, will be computed.\ndims::NTuple=(): additional dimensions to append to the shape, such as (3,) for IQU   to generate a map with (nx, ny, 3).\n\nReturns:\n\nshape::Tuple, wcs::WCSTransform: a tuple containing the shape of the map and the WCS\n\nExamples\n\njulia> shape, wcs = fullsky_geometry(deg2rad(30/60))  # 30 arcmin pixel\n((720, 361), WCSTransform(naxis=2,cdelt=[-0.5, 0.5],crval=[0.25, 0.0],crpix=[360.5, 181.0]))\n\n\n\n\n\n","category":"method"},{"location":"#Pixell.pix2sky","page":"Home","title":"Pixell.pix2sky","text":"pix2sky(m::Enmap, pixcoords)\n\nConvert 1-indexed pixels to sky coordinates. The output sky coordinates are determined by WCS, but usually are in units of degrees. \n\nArguments:\n\nm::Enmap: the map that provides a coordinate system\npixcoords: pixcoords should be a 2-d array where \"pixcoords[:, i]\" is the i-th set of coordinates,    or a 1-d array representing a single set of coordinates. \n\nReturns:\n\nArray: same shape as pixcoords\n\nExamples\n\njulia> shape, wcs = fullsky_geometry(deg2rad(1))\n       m = Enmap(rand(shape...), wcs)\njulia> pix2sky(m, [1.0, 1.0])\n2-element Vector{Float64}:\n 180.0\n -90.0\n\n\n\n\n\n","category":"function"},{"location":"#Pixell.pix2sky!-Union{Tuple{TS}, Tuple{TP}, Tuple{AA}, Tuple{N}, Tuple{T}, Tuple{Enmap{T, N, AA, CarClenshawCurtis}, AbstractMatrix{TP}, AbstractMatrix{TS}}} where {T, N, AA<:AbstractArray{T, N}, TP, TS}","page":"Home","title":"Pixell.pix2sky!","text":"pix2sky!(m::Enmap, pixcoords, skycoords)\n\nConvert 1-indexed pixels to sky coordinates, in-place. The output sky coordinates are  determined by WCS, but usually are in units of degrees. \n\nArguments:\n\nm::Enmap: the map that provides a coordinate system\npixcoords: pixel coordinates should be a 2-d array where \"pixcoords[:, i]\" is the i-th    set of coordinates, or a 1-d array representing a single set of coordinates. \nskycoords: output array for sky coordinates, must be same same as pixcoords\n\nReturns:\n\nArray: skycoords\n\nExamples\n\njulia> shape, wcs = fullsky_geometry(deg2rad(1))\n       m = Enmap(rand(shape...), wcs)\n       pixcoords =  100 .* rand(2,4096 * 2)\n       skycoords =  similar(pixcoords)\n\njulia> pix2sky!(m, pixcoords, skycoords)\n\n\n\n\n\n","category":"method"},{"location":"#Pixell.pix2sky-Union{Tuple{AA}, Tuple{N}, Tuple{T}, Tuple{Enmap{T, N, AA, CarClenshawCurtis}, Number, Number}} where {T, N, AA<:AbstractArray{T, N}}","page":"Home","title":"Pixell.pix2sky","text":"pix2sky(m::Enmap{T,N,AA,CarClenshawCurtis}, ra_pixel, dec_pixel)\n\nCompute the sky position of a single position on the sky.\n\nOnly implemented for CAR (Clenshaw-Curtis variant) projections, so the input map is of type Enmap{T,N,AA,CarClenshawCurtis}. This takes pixel indices for RA and DEC, and returns a tuple containing the corresponding RA and DEC.\n\nExamples\n\njulia> shape, wcs = fullsky_geometry(deg2rad(1))\n       m = Enmap(rand(shape...), wcs)\njulia> pix2sky(m, 30.0, 80.0)\n(151.0, -11.0)\n\n\n\n\n\n","category":"method"},{"location":"#Pixell.sky2pix","page":"Home","title":"Pixell.sky2pix","text":"sky2pix(m::Enmap, skycoords)\n\nConvert sky coordinates to 1-indexed pixels. The input sky coordinates are determined by WCS, but usually are in units of degrees. \n\nArguments:\n\nm::Enmap: the map to obtain the coordinates from\nskycoords: skycoords should be a 2-d array where \"skycoords[:, i]\" is the i-th set of coordinates,    or a 1-d array representing a single set of coordinates. \n\nReturns:\n\nArray: same shape as skycoords\n\nExamples\n\njulia> shape, wcs = fullsky_geometry(deg2rad(1))\n       m = Enmap(rand(shape...), wcs)\njulia> sky2pix(m, [30.0, 50.0])\n2-element Vector{Float64}:\n 151.0\n 141.0\n\n\n\n\n\n","category":"function"},{"location":"#Pixell.sky2pix!-Union{Tuple{TP}, Tuple{TS}, Tuple{AA}, Tuple{N}, Tuple{T}, Tuple{Enmap{T, N, AA, CarClenshawCurtis}, AbstractMatrix{TS}, AbstractMatrix{TP}}} where {T, N, AA<:AbstractArray{T, N}, TS, TP}","page":"Home","title":"Pixell.sky2pix!","text":"sky2pix!(m::Enmap, skycoords, pixcoords)\n\nConvert sky coordinates to 1-indexed pixels, in-place. The input sky coordinates are  determined by WCS, but usually are in units of degrees. \n\nArguments:\n\nm::Enmap: the map that provides a coordinate system\nskycoords: sky coordinates should be a 2-d array where \"skycoords[:, i]\" is the i-th    set of coordinates, or a 1-d array representing a single set of coordinates. \npixcoords: output array for pixel coordinates, must be same same as pixcoords\n\nReturns:\n\nArray: pixcoords\n\nExamples\n\njulia> shape, wcs = fullsky_geometry(deg2rad(1))\n       m = Enmap(rand(shape...), wcs)\n       skycoords =  similar(pixcoords)\n       pixcoords =  100 .* rand(2,4096 * 2)\njulia> sky2pix!(m, skycoords, pixcoords)\n\n\n\n\n\n","category":"method"},{"location":"#Pixell.sky2pix-Union{Tuple{AA}, Tuple{N}, Tuple{T}, Tuple{Enmap{T, N, AA, CarClenshawCurtis}, Number, Number}} where {T, N, AA<:AbstractArray{T, N}}","page":"Home","title":"Pixell.sky2pix","text":"sky2pix(m::Enmap{T,N,AA,CarClenshawCurtis}, ra, dec)\n\nCompute 1-indexed pixels into sky coordinates.\n\nOnly implemented for CAR (Clenshaw-Curtis variant) projections. Takes  RA and DEC and returns a tuple containing the corresponding pixel indices. If vectors of RA and DEC are given, then vectors of  pixel indices will be returned.\n\nExamples\n\njulia> shape, wcs = fullsky_geometry(deg2rad(1))\n       m = Enmap(rand(shape...), wcs)\njulia> sky2pix(m, 30.0, 80.0)\n(151.0, 171.0)\n\n\n\n\n\n","category":"method"}]
}
